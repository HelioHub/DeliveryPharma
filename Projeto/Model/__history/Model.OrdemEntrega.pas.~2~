unit Model.OrdemEntrega;

interface

uses
  Interfaces.IOrdemEntrega, FireDAC.Comp.Client, Data.DB, Utils.DatabaseConnection;

type
  TOrdemEntrega = class(TInterfacedObject, IOrdemEntrega)
  private
    FIdOrdemEntrega: Integer;
    FEntregadorOrdenEntrega: Integer;
    FEmissaoOrdemEntrega: TDateTime;
    FSaidaOrdemEntrega: TDateTime;
    FChegadaOrdemEntrega: TDateTime;
    FStatusOrdemEntrega: SmallInt;
    FOBSOrdemEntrega: string;
    FQuery: TFDQuery; // Query para interagir com o banco de dados
    FDatabaseConnection: TDatabaseConnection; // Conexão centralizada

    // Métodos Set e Get para cada campo
    procedure SetIdOrdemEntrega(const Value: Integer);
    function GetIdOrdemEntrega: Integer;

    procedure SetEntregadorOrdenEntrega(const Value: Integer);
    function GetEntregadorOrdenEntrega: Integer;

    procedure SetEmissaoOrdemEntrega(const Value: TDateTime);
    function GetEmissaoOrdemEntrega: TDateTime;

    procedure SetSaidaOrdemEntrega(const Value: TDateTime);
    function GetSaidaOrdemEntrega: TDateTime;

    procedure SetChegadaOrdemEntrega(const Value: TDateTime);
    function GetChegadaOrdemEntrega: TDateTime;

    procedure SetStatusOrdemEntrega(const Value: SmallInt);
    function GetStatusOrdemEntrega: SmallInt;

    procedure SetOBSOrdemEntrega(const Value: string);
    function GetOBSOrdemEntrega: string;

  public
    constructor Create;
    destructor Destroy; override;

    property IdOrdemEntrega: Integer read GetIdOrdemEntrega write SetIdOrdemEntrega;
    property EntregadorOrdenEntrega: Integer read GetEntregadorOrdenEntrega write SetEntregadorOrdenEntrega;
    property EmissaoOrdemEntrega: TDateTime read GetEmissaoOrdemEntrega write SetEmissaoOrdemEntrega;
    property SaidaOrdemEntrega: TDateTime read GetSaidaOrdemEntrega write SetSaidaOrdemEntrega;
    property ChegadaOrdemEntrega: TDateTime read GetChegadaOrdemEntrega write SetChegadaOrdemEntrega;
    property StatusOrdemEntrega: SmallInt read GetStatusOrdemEntrega write SetStatusOrdemEntrega;
    property OBSOrdemEntrega: string read GetOBSOrdemEntrega write SetOBSOrdemEntrega;

    function Salvar: Boolean; // Implementação do método Salvar
    function Excluir(const AId: Integer): Boolean; // Implementação do método Excluir
    procedure CarregarDados(const AFDMemTable: TFDMemTable;
      pidOrdemEntrega, pNomeCliente, pLimite: String;
      pDtIni, pDtFin : TDate; pStatus : Integer); // Implementação do método CarregarDados
  end;

implementation

uses
  FireDAC.DApt, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.VCLUI.Wait, FireDAC.Comp.UI, FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef, System.SysUtils, Vcl.Dialogs,
  Utils.ErrorLogger, CXConst;

{ TPedido }

constructor TOrdemEntrega.Create;
begin
  // Usa a conexão centralizada com parâmetros do arquivo .INI
  FDatabaseConnection := TDatabaseConnection.Create;
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection := FDatabaseConnection.Connection;
end;

destructor TOrdemEntrega.Destroy;
begin
  FQuery.Free;
  FDatabaseConnection.Free;
  inherited;
end;


// Métodos Set e Get para IdOrdemEntrega
procedure TOrdemEntrega.SetIdOrdemEntrega(const Value: Integer);
begin
  if Value < 0 then
    raise Exception.Create('ID da ordem de entrega não pode ser negativo.');
  FIdOrdemEntrega := Value;
end;

function TOrdemEntrega.GetIdOrdemEntrega: Integer;
begin
  Result := FIdOrdemEntrega;
end;

// Métodos Set e Get para EntregadorOrdenEntrega
procedure TOrdemEntrega.SetEntregadorOrdenEntrega(const Value: Integer);
begin
  if Value < 0 then
    raise Exception.Create('ID do entregador não pode ser negativo.');
  FEntregadorOrdenEntrega := Value;
end;

function TOrdemEntrega.GetEntregadorOrdenEntrega: Integer;
begin
  Result := FEntregadorOrdenEntrega;
end;

// Métodos Set e Get para EmissaoOrdemEntrega
procedure TOrdemEntrega.SetEmissaoOrdemEntrega(const Value: TDateTime);
begin
  if Value > Now then
    raise Exception.Create('Data de emissão não pode ser no futuro.');
  FEmissaoOrdemEntrega := Value;
end;

function TOrdemEntrega.GetEmissaoOrdemEntrega: TDateTime;
begin
  Result := FEmissaoOrdemEntrega;
end;

// Métodos Set e Get para SaidaOrdemEntrega
procedure TOrdemEntrega.SetSaidaOrdemEntrega(const Value: TDateTime);
begin
  if (Value < FEmissaoOrdemEntrega) then
    raise Exception.Create('Data de saída não pode ser anterior à data de emissão.');
  FSaidaOrdemEntrega := Value;
end;

function TOrdemEntrega.GetSaidaOrdemEntrega: TDateTime;
begin
  Result := FSaidaOrdemEntrega;
end;

// Métodos Set e Get para ChegadaOrdemEntrega
procedure TOrdemEntrega.SetChegadaOrdemEntrega(const Value: TDateTime);
begin
  if (Value < FSaidaOrdemEntrega) then
    raise Exception.Create('Data de chegada não pode ser anterior à data de saída.');
  FChegadaOrdemEntrega := Value;
end;

function TOrdemEntrega.GetChegadaOrdemEntrega: TDateTime;
begin
  Result := FChegadaOrdemEntrega;
end;

// Métodos Set e Get para StatusOrdemEntrega
procedure TOrdemEntrega.SetStatusOrdemEntrega(const Value: SmallInt);
begin
  if not (Value in [0, 1, 2, 3]) then
    raise Exception.Create('Status inválido! Valores permitidos: 0, 1, 2, 3.');
  FStatusOrdemEntrega := Value;
end;

function TOrdemEntrega.GetStatusOrdemEntrega: SmallInt;
begin
  Result := FStatusOrdemEntrega;
end;

// Métodos Set e Get para OBSOrdemEntrega
procedure TOrdemEntrega.SetOBSOrdemEntrega(const Value: string);
begin
  if Length(Value) > 1000 then
    raise Exception.Create('Observação não pode ter mais de 1000 caracteres.');
  FOBSOrdemEntrega := Value;
end;

function TOrdemEntrega.GetOBSOrdemEntrega: string;
begin
  Result := FOBSOrdemEntrega;
end;

function TOrdemEntrega.Salvar: Boolean;
var
  Logger: TErrorLogger;
begin
  Result := False;
  Logger := TErrorLogger.Create; // Usa o caminho padrão 'error.log'
  try

    FDatabaseConnection.Connection.StartTransaction;
    try
      // Prepara a query para inserir ou atualizar o pedido
      FQuery.SQL.Clear;
      if FIdOrdemEntrega = 0 then
      begin
        // Inserir novo pedido
        FQuery.SQL.Add(' INSERT INTO Pedidos (NumeroPedidos, DataEmissaoPedidos, '+
                                            ' ClientePedidos,     '+
                                            ' ValorTotalPedidos)  ');
        FQuery.SQL.Add(' VALUES (GEN_ID(GEN_Pedidos_ID, 1), :DataEmissao, '+
                               ' :Cliente,     '+
                               ' :ValorTotal)  ');
      end
      else
      begin
        // Atualizar pedido existente
        FQuery.SQL.Add(' UPDATE Pedidos SET '+
                              ' DataEmissaoPedidos = :DataEmissao, '+
                              ' ClientePedidos = :Cliente,         '+
                              ' ValorTotalPedidos = :ValorTotal    ');
        FQuery.SQL.Add('  WHERE NumeroPedidos = :NumeroPedido      ');
        FQuery.ParamByName('NumeroPedido').AsInteger := FIdOrdemEntrega;
      end;

      // Define os parâmetros da query
      FQuery.ParamByName('DataEmissao').AsDateTime := FDataEmissao;
      FQuery.ParamByName('Cliente').AsInteger := FCliente;
      FQuery.ParamByName('ValorTotal').AsFloat := FValorTotal;

      // Executa a query
      FQuery.ExecSQL;

      // Se for uma inserção, recupera o ID gerado
      if FIdOrdemEntrega = 0 then
      begin
        FQuery.SQL.Clear;
        FQuery.SQL.Add('SELECT GEN_ID(GEN_Pedidos_ID, 0) AS LastID FROM RDB$DATABASE ');
        FQuery.Open;
        FIdOrdemEntrega := FQuery.FieldByName('LastID').AsInteger;
      end;

      FDatabaseConnection.Connection.Commit;
      Result := True; // Indica que o pedido foi salvo com sucesso
    except
      on E: Exception do
      begin
        FDatabaseConnection.Connection.Rollback;
        Logger.LogError(E);
        raise Exception.Create('Erro ao salvar Ordem de Entrega: ' + E.Message);
      end;
    end;

  finally
    Logger.Free;
  end;
end;

procedure TOrdemEntrega.CarregarDados(const AFDMemTable: TFDMemTable;
  pidOrdemEntrega, pNomeCliente, pLimite: String;
  pDtIni, pDtFin : TDate; pStatus : Integer);
begin
  try
    // Prepara a query para selecionar os dados
    FQuery.SQL.Clear;
    FQuery.SQL.Add(' SELECT ');
    FQuery.SQL.Add(' 	p.NumeroPedidos,     ');
    FQuery.SQL.Add(' 	p.DataEmissaoPedidos,');
    FQuery.SQL.Add('  p.ClientePedidos,    ');
    FQuery.SQL.Add(' CASE                  ');
    FQuery.SQL.Add('   WHEN p.StatusPedidos = 0 THEN '+QuotedStr('Em aberto'));
    FQuery.SQL.Add('   WHEN p.StatusPedidos = 1 THEN '+QuotedStr('Fechado'));
    FQuery.SQL.Add('   ELSE '+QuotedStr('Desconhecido'));
    FQuery.SQL.Add(' END AS Status, ');
    FQuery.SQL.Add(' 	c.NomeClientes,      ');
    FQuery.SQL.Add('  (SELECT SUM(ip.VlrTotalItensPedido)           '+
                   '   FROM ItensPedido ip                '+
                   '   WHERE ip.PedidoItensPedido = p.NumeroPedidos '+
                   '  ) AS ValorTotalPedidos ');
    FQuery.SQL.Add('	FROM                   ');
    FQuery.SQL.Add('		Pedidos p  ');
    FQuery.SQL.Add('	JOIN                   ');
    FQuery.SQL.Add('		Clientes c ON p.ClientePedidos = c.CodigoClientes');
    FQuery.SQL.Add('	WHERE p.DataEmissaoPedidos BETWEEN :pDtIni AND :pDtFin ');
    if Not pidOrdemEntrega.IsEmpty then
      FQuery.SQL.Add('	AND p.NumeroPedidos = '+pidOrdemEntrega);
    if Not pNomeCliente.IsEmpty then
      FQuery.SQL.Add('	AND UPPER(c.NomeClientes) LIKE '+QuotedStr(UpperCase(pNomeCliente)+'%'));
    if pStatus <> cTwo then
      FQuery.SQL.Add('	AND p.StatusPedidos = '+IntToStr(pStatus));
    FQuery.SQL.Add('	ORDER BY');
    FQuery.SQL.Add('		p.DataEmissaoPedidos DESC');
    if Not pLimite.IsEmpty then
      FQuery.SQL.Add(' ROWS 1 TO '+pLimite+' ');
    FQuery.ParamByName('pDtIni').AsDate := pDtIni;
    FQuery.ParamByName('pDtFin').AsDate := pDtFin+1;
    FQuery.Open;

    if FQuery.RecordCount > 0 then
    begin
      // Copia os dados para o TFDMemTable
      AFDMemTable.Close;
      AFDMemTable.Data := FQuery.Data;
      AFDMemTable.Open;
    end
    else
      AFDMemTable.Close;
  except
    on E: Exception do
    begin
      raise Exception.Create('Erro ao carregar dados: ' + E.Message);
    end;
  end;
end;

function TOrdemEntrega.Excluir(const AId: Integer): Boolean;
begin
  Result := False;
  try
    // Prepara a query para excluir o pedido
    FQuery.SQL.Clear;
    FQuery.SQL.Add('DELETE FROM OrdemEntrega WHERE idOrdemEntrega = :Id');
    FQuery.ParamByName('Id').AsInteger := AId;

    // Executa a query
    FQuery.ExecSQL;

    Result := True; // Indica que o pedido foi excluído com sucesso
  except
    on E: Exception do
    begin
      raise Exception.Create('Erro ao excluir pedido: ' + E.Message);
    end;
  end;
end;

end.
