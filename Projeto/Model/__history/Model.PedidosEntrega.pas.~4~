unit Model.PedidosEntrega;

interface

uses
  Interfaces.IPedidosEntrega, FireDAC.Comp.Client, Data.DB, Utils.DatabaseConnection;

type
  TPedidosEntrega = class(TInterfacedObject, IPedidosEntrega)
  private
    FIdPedidosEntrega: Integer;
    FPedidoPedidosEntrega: Integer;
    FOrdemEntregaPedidosEntrega: Integer;
    FStatusPedidosEntrega: SmallInt;
    FOBSPedidosEntrega: string;

    FQuery: TFDQuery;
    FDatabaseConnection: TDatabaseConnection;

    procedure SetIdPedidosEntrega(const Value: Integer);
    function GetIdPedidosEntrega: Integer;

    procedure SetPedidoPedidosEntrega(const Value: Integer);
    function GetPedidoPedidosEntrega: Integer;

    procedure SetOrdemEntregaPedidosEntrega(const Value: Integer);
    function GetOrdemEntregaPedidosEntrega: Integer;

    procedure SetStatusPedidosEntrega(const Value: SmallInt);
    function GetStatusPedidosEntrega: SmallInt;

    procedure SetOBSPedidosEntrega(const Value: string);
    function GetOBSPedidosEntrega: string;

  public
    constructor Create;
    destructor Destroy; override;

    property IdPedidosEntrega: Integer read GetIdPedidosEntrega write SetIdPedidosEntrega;
    property PedidoPedidosEntrega: Integer read GetPedidoPedidosEntrega write SetPedidoPedidosEntrega;
    property OrdemEntregaPedidosEntrega: Integer read GetOrdemEntregaPedidosEntrega write SetOrdemEntregaPedidosEntrega;
    property StatusPedidosEntrega: SmallInt read GetStatusPedidosEntrega write SetStatusPedidosEntrega;
    property OBSPedidosEntrega: string read GetOBSPedidosEntrega write SetOBSPedidosEntrega;

    function Salvar: Boolean; // Implementação do método Salvar
    function Excluir(const AId: Integer): Boolean; // Implementação do método Excluir

    procedure CarregarDados(const AFDMemTable: TFDMemTable; pOrdemEntrega: String); // Implementação do método CarregarDados
end;

implementation

uses
  FireDAC.DApt, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.VCLUI.Wait, FireDAC.Comp.UI, FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef, System.SysUtils, System.Classes, Vcl.Dialogs, Utils.ErrorLogger;

{ TPedidosEntrega }

constructor TPedidosEntrega.Create;
begin
  // Usa a conexão centralizada com parâmetros do arquivo .INI
  FDatabaseConnection := TDatabaseConnection.Create;
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection := FDatabaseConnection.Connection;
end;

destructor TPedidosEntrega.Destroy;
begin
  FQuery.Free;
  FDatabaseConnection.Free;
  inherited;
end;

// Métodos Set e Get
procedure TPedidosEntrega.SetIdPedidosEntrega(const Value: Integer);
begin
  if Value < 0 then
    raise Exception.Create('ID do pedido de entrega não pode ser negativo.');
  FIdPedidosEntrega := Value;
end;

function TPedidosEntrega.GetIdPedidosEntrega: Integer;
begin
  Result := FIdPedidosEntrega;
end;

procedure TPedidosEntrega.SetPedidoPedidosEntrega(const Value: Integer);
begin
  if Value < 0 then
    raise Exception.Create('Pedido não pode ser negativo.');
  FPedidoPedidosEntrega := Value;
end;

function TPedidosEntrega.GetPedidoPedidosEntrega: Integer;
begin
  Result := FPedidoPedidosEntrega;
end;

procedure TPedidosEntrega.SetOrdemEntregaPedidosEntrega(const Value: Integer);
begin
  if Value < 0 then
    raise Exception.Create('Ordem de entrega não pode ser negativa.');
  FOrdemEntregaPedidosEntrega := Value;
end;

function TPedidosEntrega.GetOrdemEntregaPedidosEntrega: Integer;
begin
  Result := FOrdemEntregaPedidosEntrega;
end;

procedure TPedidosEntrega.SetStatusPedidosEntrega(const Value: SmallInt);
begin
  if not (Value in [0, 1, 2, 3]) then
    raise Exception.Create('Status inválido! Valores permitidos: 0, 1, 2, 3.');
  FStatusPedidosEntrega := Value;
end;

function TPedidosEntrega.GetStatusPedidosEntrega: SmallInt;
begin
  Result := FStatusPedidosEntrega;
end;

procedure TPedidosEntrega.SetOBSPedidosEntrega(const Value: string);
begin
  if Length(Value) > 1000 then
    raise Exception.Create('Observação não pode ter mais de 1000 caracteres.');
  FOBSPedidosEntrega := Value;
end;

function TPedidosEntrega.GetOBSPedidosEntrega: string;
begin
  Result := FOBSPedidosEntrega;
end;


function TPedidosEntrega.Salvar: Boolean;
var
  Logger: TErrorLogger;
begin
  Result := False;
  Logger := TErrorLogger.Create; // Usa o caminho padrão 'error.log'
  try

  FDatabaseConnection.Connection.StartTransaction;
  try
    // Prepara a query para inserir ou atualizar o item de pedido
    FQuery.SQL.Clear;
    if FIdPedidosEntrega = 0 then
    begin
      // Inserir novo item de pedido
      FQuery.SQL.Add('INSERT INTO PedidosEntrega ' +
                     '(idPedidosEntrega, PedidoPedidosEntrega, OrdemEntregaPedidosEntrega, StatusPedidosEntrega, OBSPedidosEntrega) ' +
                     'VALUES ' +
                     '(GEN_ID(GEN_PedidosEntrega_ID, 1), :Pedido, :OrdemEntrega, :Status, :OBS)');
    end
    else
    begin
      // Atualizar item de pedido existente
      FQuery.SQL.Add('UPDATE PedidosEntrega SET ' +
                     'PedidoPedidosEntrega = :Pedido, ' +
                     'OrdemEntregaPedidosEntrega = :OrdemEntrega, ' +
                     'StatusPedidosEntrega = :Status, ' +
                     'OBSPedidosEntrega = :OBS ' +
                     'WHERE idPedidosEntrega = :Id');
      FQuery.ParamByName('idPedidosEntrega').AsInteger := FIdPedidosEntrega;
    end;

    // Define os parâmetros da query
    FQuery.ParamByName('Pedido').Value := FPedidoPedidosEntrega;
    FQuery.ParamByName('OrdemEntrega').Value := FOrdemEntregaPedidosEntrega;
    FQuery.ParamByName('Status').Value := FStatusPedidosEntrega;
    FQuery.ParamByName('OBS').Value := FOBSPedidosEntrega;

    // Executa a query
    FQuery.ExecSQL;

    // Se for uma inserção, recupera o ID gerado
    if FIdPedidosEntrega = 0 then
    begin
      FQuery.SQL.Clear;
      FQuery.SQL.Add('SELECT GEN_ID(GEN_PedidosEntrega_ID, 0) AS LastID FROM RDB$DATABASE ');
      FQuery.Open;
      FIdPedidosEntrega := FQuery.FieldByName('LastID').AsInteger;
    end;

    FDatabaseConnection.Connection.Commit;
    Result := True; // Indica que o item de pedido foi salvo com sucesso
  except
    on E: Exception do
    begin
      FDatabaseConnection.Connection.Rollback;
      Logger.LogError(E);
      raise Exception.Create('Erro ao salvar item de pedido: ' + E.Message);
    end;
  end;

  finally
    Logger.Free;
  end;
end;

procedure TPedidosEntrega.CarregarDados(const AFDMemTable: TFDMemTable; pOrdemEntrega: String);
begin
  try
    // Prepara a query para selecionar os dados
    FQuery.SQL.Clear;
    FQuery.SQL.Add(' SELECT a.idPedidosEntrega, a.OrdemEntregaPedidosEntrega, a.PedidoPedidosEntrega,');
    FQuery.SQL.Add('        c.CodigoClientes, c.NomeClientes, c.BairroClientes ');
    FQuery.SQL.Add('        b.ValorTotalPedidos  ');
    FQuery.SQL.Add('        a.OBSPedidosEntrega ');
    FQuery.SQL.Add(' CASE                  ');
    FQuery.SQL.Add('   WHEN a.StatusOrdemEntrega = 0 THEN '+QuotedStr('Pendente'));
    FQuery.SQL.Add('   WHEN a.StatusOrdemEntrega = 1 THEN '+QuotedStr('Em Andamento'));
    FQuery.SQL.Add('   WHEN a.StatusOrdemEntrega = 2 THEN '+QuotedStr('Entregue Parcial'));
    FQuery.SQL.Add('   WHEN a.StatusOrdemEntrega = 3 THEN '+QuotedStr('Entregue Total'));
    FQuery.SQL.Add('   ELSE '+QuotedStr('Desconhecido'));
    FQuery.SQL.Add(' END AS Status ');
    FQuery.SQL.Add(' FROM PedidosEntrega a ');
    FQuery.SQL.Add(' JOIN Pedidos b ON b.NumeroPedidos = a.PedidoPedidosEntrega ');
    FQuery.SQL.Add(' JOIN Clientes c ON c.CodigoClientes = b.ClientePedidos ');
    if not pOrdementrega.IsEmpty then
      FQuery.SQL.Add(' WHERE a.idPedidosEntrega = '+pOrdemEntrega);
    FQuery.SQL.Add(' ORDER BY a.idPedidosEntrega ');
    FQuery.Open;

    // Copia os dados para o TFDMemTable
    begin
      AFDMemTable.Close;
      AFDMemTable.Data := FQuery.Data;
      AFDMemTable.Open;
    end;
  except
    on E: Exception do
    begin
      raise Exception.Create('Erro ao carregar dados: ' + E.Message);
    end;
  end;
end;

function TPedidosEntrega.Excluir(const AId: Integer): Boolean;
begin
  Result := False;
  try
    FQuery.SQL.Clear;
    FQuery.SQL.Add('DELETE FROM PedidosEntrega WHERE idPedidosEntrega = :Id ');
    FQuery.ParamByName('Id').AsInteger := AId;

    FQuery.ExecSQL;

    Result := True;
  except
    on E: Exception do
    begin
      raise Exception.Create('Erro ao excluir Pedido da Entrega: ' + E.Message);
    end;
  end;
end;

end.
